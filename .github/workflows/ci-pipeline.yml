name: CI Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"

  pull_request:
    branches:
      - main
    paths-ignore:
      - "README.md"

jobs:
  backend-check:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update
        run: |
          sudo apt-get update

      - name: Setup Conda
        run: |
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          export PATH="$HOME/miniconda/bin:$PATH"
          cd ccg_backend
          conda env create -f environment.yml

      - name: Run Flake8
        run: |
          source ~/miniconda/etc/profile.d/conda.sh
          conda activate myenv
          pip install flake8
          flake8 --config=ccg_backend/.flake8 ccg_backend/

      - name: Wait for PostGIS to be ready
        run: |
          until PGPASSWORD=test_password psql -h localhost -U test_user -d test_db -c "SELECT 1" &>/dev/null; do
            echo "Waiting for PostGIS..."
            sleep 3
          done
          echo "PostGIS is ready!"

      - name: Run backend tests
        env:
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          ORS_BASE_URL: ${{ secrets.ORS_BASE_URL }}
          OTP_BASE_URL: ${{ secrets.OTP_BASE_URL }}
          IS_IN_CI: 1
          TEST_DB_NAME: test_db
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_password
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
        run: |
          cd ccg_backend
          conda init bash
          source ~/miniconda/etc/profile.d/conda.sh
          conda activate myenv
          python manage.py makemigrations
          python manage.py migrate
          pip install pytest-cov
          pytest --cov-report=xml:coverage.xml

      - name: Upload backend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: ccg_backend/coverage.xml

  frontend-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js and dependencies
        uses: actions/setup-node@v4

      - name: Install frontend dependencies
        run: |
          cd ccg_frontend/ccg_mobile
          npm install -g expo-cli
          npm install --legacy-peer-deps

      - name: Run ESLint & Prettier
        run: |
          cd ccg_frontend/ccg_mobile
          npm install --save-dev eslint@8
          npm install eslint-plugin-react@latest --save-dev
          npm install @typescript-eslint/eslint-plugin@latest --save-dev
          npx eslint .
          npm run format:check

      - name: Run frontend tests
        run: |
          cd ccg_frontend/ccg_mobile
          npm run test --coverage

      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ccg_frontend/ccg_mobile/coverage/lcov.info

  sonarcloud-scan:
    runs-on: ubuntu-latest
    needs: [backend-check, frontend-check]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download backend coverage report
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: ccg_backend

      - name: Download frontend coverage report
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: ccg_frontend/ccg_mobile/coverage

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
